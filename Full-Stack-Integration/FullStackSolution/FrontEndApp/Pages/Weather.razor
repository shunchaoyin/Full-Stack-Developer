@page "/weather"
@inject WeatherService WeatherService
@inject WeatherState WeatherState
@implements IDisposable

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates fetching data from the server.</p>
<button class="btn btn-primary" @onclick="RefreshWeather" disabled="@isLoading">
    @if (isLoading)
    {
        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
        <text> Loading</text>
    }
    else
    {
        <text>Refresh Weather Data</text>
    }
</button>

@if (isLoading)
{
    <p><em>Loading weather data...</em></p>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">
        <strong>Error:</strong> @errorMessage
    </div>
}
else if (WeatherState.Weather == null)
{
    <p>No weather data available. Please check your connection or try again later.</p>
}
else if (WeatherState.Weather.Length == 0)
{
    <p>No weather data available.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in WeatherState.Weather)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private bool isLoading = false;
    private string errorMessage = string.Empty;
    private int requestId = 0;
    private CancellationTokenSource? cancellationTokenSource;

    protected override async Task OnInitializedAsync()
    {
        WeatherState.OnChange += StateHasChanged;
        await LoadWeatherData();
    }

    public void Dispose()
    {
        WeatherState.OnChange -= StateHasChanged;
        cancellationTokenSource?.Cancel();
        cancellationTokenSource?.Dispose();
    }

    private async Task LoadWeatherData()
    {
        // 确保只有最后一次点击会执行刷新
        var currentRequestId = ++requestId;
        
        // 取消之前的请求
        cancellationTokenSource?.Cancel();
        cancellationTokenSource?.Dispose();
        cancellationTokenSource = new CancellationTokenSource();

        isLoading = true;
        errorMessage = string.Empty;
        StateHasChanged();

        try
        {
            // 检查是否是最新的请求
            if (currentRequestId != requestId)
                return;

            await Task.Delay(2000, cancellationTokenSource.Token); // Simulate a delay for loading
            var weather = await WeatherService.GetWeatherForecastAsync(cancellationTokenSource.Token);
            
            // 再次检查是否是最新的请求
            if (currentRequestId == requestId && !cancellationTokenSource.Token.IsCancellationRequested)
            {
                if (weather != null)
                {
                    WeatherState.UpdateWeather(weather);
                }
            }
        }
        catch (OperationCanceledException)
        {
            // 请求被取消，这是预期的行为
            Console.WriteLine("操作已取消");
        }
        catch (Exception ex)
        {
            if (currentRequestId == requestId)
            {
                errorMessage = $"Error loading weather data: {ex.Message}";
            }
        }
        finally
        {
            if (currentRequestId == requestId)
            {
                isLoading = false;
                StateHasChanged();
            }
        }
    }

    private async Task RefreshWeather()
    {
        await LoadWeatherData();
    }
}
