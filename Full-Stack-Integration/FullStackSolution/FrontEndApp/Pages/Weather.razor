@page "/weather"
@inject FrontEndApp.Services.WeatherService WeatherService
@using FrontEndApp.Services

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (isLoading)
{
    <p><em>Loading weather data...</em></p>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">
        <strong>Error:</strong> @errorMessage
    </div>
}
else if (forecasts == null)
{
    <p>No weather data available. Please check your connection or try again later.</p>
}
else if (forecasts.Length == 0)
{
    <p>No weather data available.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;
    private bool isLoading = true;
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        // Use the WeatherService to get data from ServerApi
        try
        {
            forecasts = await WeatherService.GetWeatherForecastAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error fetching weather data: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
}
